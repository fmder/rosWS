"""autogenerated by genpy from custom_navigation/S_ADCRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class S_ADCRequest(genpy.Message):
  _md5sum = "9a5b02b00f10349a8178e70cea30327c"
  _type = "custom_navigation/S_ADCRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool subscribe
bool[8] adcChannels
uint16 adcFreqAcq
uint16 adcFreqPoll
uint32 adcBufferSize

"""
  __slots__ = ['subscribe','adcChannels','adcFreqAcq','adcFreqPoll','adcBufferSize']
  _slot_types = ['bool','bool[8]','uint16','uint16','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       subscribe,adcChannels,adcFreqAcq,adcFreqPoll,adcBufferSize

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_ADCRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.subscribe is None:
        self.subscribe = False
      if self.adcChannels is None:
        self.adcChannels = [False,False,False,False,False,False,False,False]
      if self.adcFreqAcq is None:
        self.adcFreqAcq = 0
      if self.adcFreqPoll is None:
        self.adcFreqPoll = 0
      if self.adcBufferSize is None:
        self.adcBufferSize = 0
    else:
      self.subscribe = False
      self.adcChannels = [False,False,False,False,False,False,False,False]
      self.adcFreqAcq = 0
      self.adcFreqPoll = 0
      self.adcBufferSize = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.subscribe))
      buff.write(_struct_8B.pack(*self.adcChannels))
      _x = self
      buff.write(_struct_2HI.pack(_x.adcFreqAcq, _x.adcFreqPoll, _x.adcBufferSize))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.subscribe,) = _struct_B.unpack(str[start:end])
      self.subscribe = bool(self.subscribe)
      start = end
      end += 8
      self.adcChannels = _struct_8B.unpack(str[start:end])
      self.adcChannels = map(bool, self.adcChannels)
      _x = self
      start = end
      end += 8
      (_x.adcFreqAcq, _x.adcFreqPoll, _x.adcBufferSize,) = _struct_2HI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.subscribe))
      buff.write(self.adcChannels.tostring())
      _x = self
      buff.write(_struct_2HI.pack(_x.adcFreqAcq, _x.adcFreqPoll, _x.adcBufferSize))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.subscribe,) = _struct_B.unpack(str[start:end])
      self.subscribe = bool(self.subscribe)
      start = end
      end += 8
      self.adcChannels = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=8)
      self.adcChannels = map(bool, self.adcChannels)
      _x = self
      start = end
      end += 8
      (_x.adcFreqAcq, _x.adcFreqPoll, _x.adcBufferSize,) = _struct_2HI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8B = struct.Struct("<8B")
_struct_2HI = struct.Struct("<2HI")
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from custom_navigation/S_ADCResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class S_ADCResponse(genpy.Message):
  _md5sum = "ba0ef05866f4fc5d7e82544d27e5cfbc"
  _type = "custom_navigation/S_ADCResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 ret

"""
  __slots__ = ['ret']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_ADCResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = 0
    else:
      self.ret = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.ret))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.ret))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class S_ADC(object):
  _type          = 'custom_navigation/S_ADC'
  _md5sum = '6de67c1a66aa444be3767d62a6a225da'
  _request_class  = S_ADCRequest
  _response_class = S_ADCResponse

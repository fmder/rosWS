"""autogenerated by genpy from custom_navigation/S_DigitalOutRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class S_DigitalOutRequest(genpy.Message):
  _md5sum = "296499f8572b029d54dd751c3721f6e7"
  _type = "custom_navigation/S_DigitalOutRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[4] outputState

"""
  __slots__ = ['outputState']
  _slot_types = ['bool[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       outputState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_DigitalOutRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.outputState is None:
        self.outputState = [False,False,False,False]
    else:
      self.outputState = [False,False,False,False]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_4B.pack(*self.outputState))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      self.outputState = _struct_4B.unpack(str[start:end])
      self.outputState = map(bool, self.outputState)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.outputState.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      self.outputState = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.outputState = map(bool, self.outputState)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
"""autogenerated by genpy from custom_navigation/S_DigitalOutResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class S_DigitalOutResponse(genpy.Message):
  _md5sum = "3cc044689b4d3b1dc6cdd1ded51ddb16"
  _type = "custom_navigation/S_DigitalOutResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 ret
float64 timestampSet

"""
  __slots__ = ['ret','timestampSet']
  _slot_types = ['int8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret,timestampSet

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(S_DigitalOutResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = 0
      if self.timestampSet is None:
        self.timestampSet = 0.
    else:
      self.ret = 0
      self.timestampSet = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.ret, _x.timestampSet))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.ret, _x.timestampSet,) = _struct_bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.ret, _x.timestampSet))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.ret, _x.timestampSet,) = _struct_bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bd = struct.Struct("<bd")
class S_DigitalOut(object):
  _type          = 'custom_navigation/S_DigitalOut'
  _md5sum = 'b64c19e3f60b552446035ef80f71381e'
  _request_class  = S_DigitalOutRequest
  _response_class = S_DigitalOutResponse
